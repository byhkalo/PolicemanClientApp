//
//  UIView+IBInspecteble.swift
//
//

import Foundation
import UIKit
import QuartzCore

/// Computed properties, based on the backing CALayer property, that are visible in Interface Builder.
extension UIView {
  // When positive, the background of the layer will be drawn with rounded corners.
  // Also effects the mask generated by the `masksToBounds' property. Defaults to zero. Animatable.
  @IBInspectable var cornerRadius: Double {
    get {
      return Double(self.layer.cornerRadius)
    }
    set {
      self.layer.cornerRadius = CGFloat(newValue)
    }
  }
  /// The width of the layer's border, inset from the layer bounds. The border is composited above the layer's
  /// content and sublayers and includes the effects of the `cornerRadius' property. Defaults to zero. Animatable.
  @IBInspectable var borderWidth: Double {
    get {
      return Double(self.layer.borderWidth)
    }
    set {
      self.layer.borderWidth = CGFloat(newValue)
    }
  }
  /// The color of the layer's border. Defaults to opaque black.
  /// Colors created from tiled patterns are supported. Animatable.
  @IBInspectable var borderColor: UIColor? {
    get {
      guard let borderColor = self.layer.borderColor else { return nil }
      return UIColor(cgColor: borderColor)
    }
    set {
      self.layer.borderColor = newValue?.cgColor
    }
  }
  /// The color of the shadow. Defaults to opaque black.
  /// Colors created from patterns are currently NOT supported. Animatable.
  @IBInspectable var shadowColor: UIColor? {
    get {
      guard let shadowColor = self.layer.shadowColor else { return nil }
      return UIColor(cgColor: shadowColor)
    }
    set {
      self.layer.shadowColor = newValue?.cgColor
    }
  }
  /// The opacity of the shadow. Defaults to 0.
  /// Specifying a value outside the [0,1] range will give undefined results. Animatable.
  @IBInspectable var shadowOpacity: Float {
    get {
      return self.layer.shadowOpacity
    }
    set {
      self.layer.shadowOpacity = newValue
    }
  }
  /// The shadow offset. Defaults to (0, -3). Animatable.
  @IBInspectable var shadowOffset: CGSize {
    get {
      return self.layer.shadowOffset
    }
    set {
      self.layer.shadowOffset = newValue
    }
  }
  /// The blur radius used to create the shadow. Defaults to 3. Animatable.
  @IBInspectable var shadowRadius: Double {
    get {
      return Double(self.layer.shadowRadius)
    }
    set {
      self.layer.shadowRadius = CGFloat(newValue)
    }
  }
  @IBInspectable var masksToBounds: Bool {
    get {
      return self.layer.masksToBounds
    }
    set {
      self.layer.masksToBounds = newValue
    }
  }
}
